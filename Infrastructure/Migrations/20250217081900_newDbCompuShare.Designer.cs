// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250217081900_newDbCompuShare")]
    partial class newDbCompuShare
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "thabo@gmail.com",
                            Name = "Thabo",
                            Password = "$2a$11$Cni2kUZHWVhIQJ3IvOH5ne.N.IJHFlno6FyFpllwEE1kxv9CputLe",
                            Surname = "Khoza"
                        },
                        new
                        {
                            Id = 2,
                            Email = "thato@gmail.com",
                            Name = "Thato",
                            Password = "$2a$11$Cni2kUZHWVhIQJ3IvOH5ne.N.IJHFlno6FyFpllwEE1kxv9CputLe",
                            Surname = "Mamatela"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Computer", b =>
                {
                    b.Property<int>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComputerId"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerVersion")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComputerId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("Domain.Entities.ComputerApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("ApplicationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCollected")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("int");

                    b.Property<string>("StudentSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeApplied")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Domain.Entities.Refubishment", b =>
                {
                    b.Property<int>("RebubishmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RebubishmentId"));

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateRefubished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReleased")
                        .HasColumnType("datetime2");

                    b.HasKey("RebubishmentId");

                    b.HasIndex("ComputerId");

                    b.ToTable("Refubishments");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            Email = "102412345@tut4life.ac.za",
                            Name = "Kamohelo",
                            Password = "$2a$11$Cni2kUZHWVhIQJ3IvOH5ne.N.IJHFlno6FyFpllwEE1kxv9CputLe",
                            StudentNumber = 102412345,
                            Surname = "Mohapi"
                        },
                        new
                        {
                            StudentId = 2,
                            Email = "102423456@tut4life.ac.za",
                            Name = "Thabo",
                            Password = "$2a$11$Cni2kUZHWVhIQJ3IvOH5ne.N.IJHFlno6FyFpllwEE1kxv9CputLe",
                            StudentNumber = 102423456,
                            Surname = "Mohale"
                        },
                        new
                        {
                            StudentId = 3,
                            Email = "102434567@tut4life.ac.za",
                            Name = "Busisiwe",
                            Password = "$2a$11$Cni2kUZHWVhIQJ3IvOH5ne.N.IJHFlno6FyFpllwEE1kxv9CputLe",
                            StudentNumber = 102434567,
                            Surname = "Mkhize"
                        },
                        new
                        {
                            StudentId = 4,
                            Email = "102445678@tut4life.ac.za",
                            Name = "Jabulile",
                            Password = "$2a$11$Cni2kUZHWVhIQJ3IvOH5ne.N.IJHFlno6FyFpllwEE1kxv9CputLe",
                            StudentNumber = 102445678,
                            Surname = "Mkhwanazi"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ComputerApplication", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.HasOne("Domain.Entities.ComputerApplication", "ComputerApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComputerApplication");
                });

            modelBuilder.Entity("Domain.Entities.Refubishment", b =>
                {
                    b.HasOne("Domain.Entities.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computer");
                });
#pragma warning restore 612, 618
        }
    }
}
